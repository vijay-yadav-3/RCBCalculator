# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
#    - name: Install dependencies
      # run: |
        # python -m pip install --upgrade pip
        # if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Run Python Code
      env:
        RAPID_API_KEY: ${{ secrets.RAPID_API_KEY }}
      run: |
        python schedule_and_points_refresh.py $RAPID_API_KEY
    
    # - name: Create Release
      # id: create_release
      # uses: actions/create-release@v1
      # env:
        # GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
      # with:
        # tag_name: "latest"
        # release_name: "latest"
        # draft: false
        # prerelease: false
    # - name: Upload Release Asset
      # id: upload-release-asset 
      # uses: actions/upload-release-asset@v1
      # env:
        # GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
      # with:
        # upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        # asset_path: ./*.json
        # asset_content_type: json
    
    
    - uses: xresloader/upload-to-github-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
      with:
        file: "*.json"
        # release_id: ${{ steps.create_release.outputs.id }}
        release_id: "latest"
        overwrite: true
        verbose: true
